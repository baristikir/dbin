input AcceptProposalInput {
  connectionId: String!
  credentialId: String!
}

type Agent {
  connections: [Connection!]!
  credentialDefinition: CredentialDefinition

  """This field resolves the BusinessCredential schema from the ledger."""
  credentialSchema: CredentialSchema
  isInitialized: Boolean!
  label: String!
}

type Connection {
  alias: String
  autoAcceptConnection: Boolean
  did: String
  errMessage: String

  """Connection Record ID, often known as connectionId"""
  id: String!
  invitationDid: String
  isReady: Boolean!
  isRequester: Boolean!
  mediatorId: String
  messages: [ConnectionCredentialMessage!]!
  oobId: String
  protocol: String
  protocolVersion: String
  rand: Int!
  rawState: String!
  role: String!
  state: String!
  theirDid: String
  theirLabel: String
  threadId: String
  type: String!
}

type ConnectionCredentialMessage {
  attributes: [ConnectionCredentialProposalAttribute!]!
  credentialId: String!
  credentialState: String!
  proposal: ConnectionCredentialProposal!
}

type ConnectionCredentialProposal {
  credentialDefinitionId: String!
  issuerDid: String!
  schemaId: String!
  schemaIssuerDid: String!
  schemaName: String!
  schemaVersion: String!
}

type ConnectionCredentialProposalAttribute {
  mime: String!
  name: String!
  value: String!
}

input ConnectionsFilterInput {
  isReady: Boolean
  isRequester: Boolean
  protocol: String
  state: String
  theirDid: String
  theirLabel: String
}

type Credential {
  connectionId: String
  id: String!
  protocolVersion: String!
  state: String!
  threadId: String!
  type: String!
}

type CredentialDefinition {
  id: String!
  schemaId: String!
  tag: String!
  type: String!
  ver: String!
}

type CredentialSchema {
  attributes: [String!]!
  id: String!
  name: String!
  seqNo: Int!
  ver: String!
  version: String!
}

scalar DateTime

type Did {
  did: String!
  verkey: String!
}

input IssueCredentialAttribute {
  name: String!
  value: String!
}

input IssueCredentialInput {
  attributes: [IssueCredentialAttribute!]!
  connectionId: String!
}

type Mutation {
  acceptProposal(input: AcceptProposalInput!): Result!
  createDid: Did! @deprecated(reason: "Not compatible with afj-0.3.x version")
  createInvitation: String!
  issueCredential(input: IssueCredentialInput!): Result!
  removeConnection(input: RemoveConnectionInput!): Boolean!
}

type Query {
  agent: Agent!
  connection(id: String!): Connection
  connections(filter: ConnectionsFilterInput): [Connection!]!
  credentialByConnection(connectionId: String!): [Credential!]!
  credentialSchemas: CredentialSchema
  credentials: [Credential!]!
}

input RemoveConnectionInput {
  connectionId: String!
}

type Result {
  payload: String!
  status: ResultStatus!
}

enum ResultStatus {
  FAILED
  SUCCESS
}

type Subscription {
  connections(filter: ConnectionsFilterInput): [Connection!]!
}