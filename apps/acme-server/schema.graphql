type Agent {
  connections: [Connection!]!
  credentials: [Credential!]!
  isInitialized: Boolean!
  label: String!
}

input ConnectWithAgentInput {
  url: String!
}

type Connection {
  alias: String
  autoAcceptConnection: Boolean
  did: String
  errMessage: String

  """Connection Record ID, often known as connectionId"""
  id: String!
  invitationDid: String
  isReady: Boolean!
  isRequester: Boolean!
  isStateCompleted: Boolean!
  mediatorId: String
  oobId: String
  protocol: String
  protocolVersion: String
  role: String!
  state: String!
  theirDid: String
  theirLabel: String
  threadId: String
  type: String!
}

type Credential {
  connectionId: String
  id: String!
  protocolVersion: String!
  state: String!
  threadId: String!
  type: String!
}

scalar DateTime

type Mutation {
  acceptInvitation(input: ConnectWithAgentInput!): Boolean!
  presentProof(input: PresentProofInput!): Boolean!
  proposeCredential(input: ProposeCredentialInput!): Boolean!
  removeConnection(input: RemoveConnectionInput!): Boolean!
  signIn(input: SignInInput!): Boolean!
}

input PresentProofInput {
  connectionId: String!
  credentialId: String!
}

input ProposeCredentialInput {
  connectionId: String!
  created_at: String!
  registered_adress: String!
  registered_country: String!
  registered_name: String!
}

type Query {
  agent: Agent!
  connections: [Connection!]!
  me: Boolean!
}

input RemoveConnectionInput {
  id: String!
}

input SignInInput {
  email: String!
  password: String!
}