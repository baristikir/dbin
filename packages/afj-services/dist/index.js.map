{"version":3,"sources":["../index.ts","../src/ledgerServices.ts","../src/agentConfigs.ts","../src/baseService.ts","../src/agentServices.ts","../src/credentialServices.ts","../src/connectionServices.ts"],"sourcesContent":["export * as LedgerServices from \"./src/ledgerServices\";\nexport * as AgentConfigServices from \"./src/agentConfigs\";\nexport { AgentService } from \"./src/agentServices\";\nexport { CredentialService } from \"./src/credentialServices\";\nexport { ConnectionService } from \"./src/connectionServices\";\n","import { RequestInfo, ResponseInit } from \"node-fetch\";\n\n// For network request purposes only.\nconst fetch = (url: RequestInfo, init?: ResponseInit) =>\n\timport(\"node-fetch\").then(({ default: fetch }) => fetch(url, init));\n\n// Hyperledger Indy networks will return the genesis file as a plaintext response\nexport async function fetchGenesisTransaction(\n\tledgerUrl: string\n): Promise<string> {\n\tconsole.log(\n\t\t\"[ledger.services] Fetching Genesis Transaction for Indy Ledger..\"\n\t);\n\tconst res = await fetch(ledgerUrl);\n\treturn await res.text();\n}\n","import {\n\tAgent,\n\tInitConfig,\n\tIndyPoolConfig,\n\tConnectionsModule,\n} from \"@aries-framework/core\";\nimport { agentDependencies } from \"@aries-framework/node\";\nimport { fetchGenesisTransaction } from \"./ledgerServices\";\n\ninterface RequiredAgentConfig extends InitConfig {\n\twalletConfig: InitConfig[\"walletConfig\"];\n}\ninterface CreateAgentConfigProps extends RequiredAgentConfig {}\nexport async function createAgentConfig({ ...args }: CreateAgentConfigProps) {\n\tconsole.log(\"[agent.config] Creating Agent Config..\");\n\n\tconst config: InitConfig = {\n\t\t...args,\n\t};\n\n\treturn config;\n}\n\ntype IndyLedgerConfig = {\n\tid: string;\n\tledgerUrl: string;\n\tindyNamespace: string;\n\tisProduction: boolean;\n};\ninterface CreateAgentProps {\n\tconfig: InitConfig;\n\tindyLedgers: IndyLedgerConfig[];\n}\n\nconst genesisTransactionsCache = new WeakMap<IndyLedgerConfig, string>();\nexport async function createAgent({ config, indyLedgers }: CreateAgentProps) {\n\tconsole.log(\"[agent.config] Creating Agent..\");\n\n\tlet ledgers: IndyPoolConfig[] = [];\n\tfor (const key in indyLedgers) {\n\t\tconst indyLedger = indyLedgers[key];\n\t\tif (genesisTransactionsCache.has(indyLedger)) {\n\t\t\tconsole.log(\"[agent.configs] Found Genesis Transaction in cache.\");\n\n\t\t\tif (\"ledgerUrl\" in indyLedger) delete indyLedger.ledgerUrl;\n\n\t\t\tledgers.push({\n\t\t\t\t...indyLedger,\n\t\t\t\tgenesisTransactions: genesisTransactionsCache.get(indyLedger),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\t// Fetching Genesis transaction file via HTTP GET request\n\t\t// const genesisTransactions = await fetchGenesisTransaction(\n\t\t// \tindyLedger.ledgerUrl\n\t\t// );\n\t\tconst genesisTransactions = `\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node1\",\"blskey\":\"4N8aUNHSgjQVgkpm8nhNEfDf6txHznoYREg9kirmJrkivgL4oSEimFF6nsQ6M41QvhM2Z33nves5vfSn9n1UwNFJBYtWVnHYMATn76vLuL3zU88KyeAYcHfsih3He6UHcXDxcaecHVz6jhCYz1P2UZn2bDVruL5wXpehgBfBaLKm3Ba\",\"blskey_pop\":\"RahHYiCvoNCtPTrVtP7nMC5eTYrsUA8WjXbdhNc8debh1agE9bGiJxWBXYNFbnJXoXhWFMvyqhqhRoq737YQemH5ik9oL7R4NTTCz2LEZhkgLJzB3QRQqJyBNyv7acbdHrAT8nQ9UkLbaVL9NBpnWXBTw4LEMePaSHEw66RzPNdAX1\",\"client_ip\":\"138.197.161.221\",\"client_port\":9702,\"node_ip\":\"138.197.161.221\",\"node_port\":9701,\"services\":[\"VALIDATOR\"]},\"dest\":\"Gw6pDLhcBcoQesN72qfotTgFa7cbuqZpkX3Xo6pLhPhv\"},\"metadata\":{\"from\":\"Th7MpTaRZVRYnPiabds81Y\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":1,\"txnId\":\"fea82e10e894419fe2bea7d96296a6d46f50f93f9eeda954ec461b2ed2950b62\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node2\",\"blskey\":\"37rAPpXVoxzKhz7d9gkUe52XuXryuLXoM6P6LbWDB7LSbG62Lsb33sfG7zqS8TK1MXwuCHj1FKNzVpsnafmqLG1vXN88rt38mNFs9TENzm4QHdBzsvCuoBnPH7rpYYDo9DZNJePaDvRvqJKByCabubJz3XXKbEeshzpz4Ma5QYpJqjk\",\"blskey_pop\":\"Qr658mWZ2YC8JXGXwMDQTzuZCWF7NK9EwxphGmcBvCh6ybUuLxbG65nsX4JvD4SPNtkJ2w9ug1yLTj6fgmuDg41TgECXjLCij3RMsV8CwewBVgVN67wsA45DFWvqvLtu4rjNnE9JbdFTc1Z4WCPA3Xan44K1HoHAq9EVeaRYs8zoF5\",\"client_ip\":\"138.197.161.221\",\"client_port\":9704,\"node_ip\":\"138.197.161.221\",\"node_port\":9703,\"services\":[\"VALIDATOR\"]},\"dest\":\"8ECVSk179mjsjKRLWiQtssMLgp6EPhWXtaYyStWPSGAb\"},\"metadata\":{\"from\":\"EbP4aYNeTHL6q385GuVpRV\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":2,\"txnId\":\"1ac8aece2a18ced660fef8694b61aac3af08ba875ce3026a160acbc3a3af35fc\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node3\",\"blskey\":\"3WFpdbg7C5cnLYZwFZevJqhubkFALBfCBBok15GdrKMUhUjGsk3jV6QKj6MZgEubF7oqCafxNdkm7eswgA4sdKTRc82tLGzZBd6vNqU8dupzup6uYUf32KTHTPQbuUM8Yk4QFXjEf2Usu2TJcNkdgpyeUSX42u5LqdDDpNSWUK5deC5\",\"blskey_pop\":\"QwDeb2CkNSx6r8QC8vGQK3GRv7Yndn84TGNijX8YXHPiagXajyfTjoR87rXUu4G4QLk2cF8NNyqWiYMus1623dELWwx57rLCFqGh7N4ZRbGDRP4fnVcaKg1BcUxQ866Ven4gw8y4N56S5HzxXNBZtLYmhGHvDtk6PFkFwCvxYrNYjh\",\"client_ip\":\"138.197.161.221\",\"client_port\":9706,\"node_ip\":\"138.197.161.221\",\"node_port\":9705,\"services\":[\"VALIDATOR\"]},\"dest\":\"DKVxG2fXXTU8yT5N7hGEbXB3dfdAnYv1JczDUHpmDxya\"},\"metadata\":{\"from\":\"4cU41vWW82ArfxJxHkzXPG\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":3,\"txnId\":\"7e9f355dffa78ed24668f0e0e369fd8c224076571c51e2ea8be5f26479edebe4\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node4\",\"blskey\":\"2zN3bHM1m4rLz54MJHYSwvqzPchYp8jkHswveCLAEJVcX6Mm1wHQD1SkPYMzUDTZvWvhuE6VNAkK3KxVeEmsanSmvjVkReDeBEMxeDaayjcZjFGPydyey1qxBHmTvAnBKoPydvuTAqx5f7YNNRAdeLmUi99gERUU7TD8KfAa6MpQ9bw\",\"blskey_pop\":\"RPLagxaR5xdimFzwmzYnz4ZhWtYQEj8iR5ZU53T2gitPCyCHQneUn2Huc4oeLd2B2HzkGnjAff4hWTJT6C7qHYB1Mv2wU5iHHGFWkhnTX9WsEAbunJCV2qcaXScKj4tTfvdDKfLiVuU2av6hbsMztirRze7LvYBkRHV3tGwyCptsrP\",\"client_ip\":\"138.197.161.221\",\"client_port\":9708,\"node_ip\":\"138.197.161.221\",\"node_port\":9707,\"services\":[\"VALIDATOR\"]},\"dest\":\"4PS3EDQ3dW1tci1Bp6543CfuuebjFrg36kLAUcskGfaA\"},\"metadata\":{\"from\":\"TWwCRQRZ2ZHMJFn9TzLp7W\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":4,\"txnId\":\"aa5e817d7cc626170eca175822029339a444eb0ee8f0bd20d3b0b76e566fb008\"},\"ver\":\"1\"}`;\n\t\tif (typeof genesisTransactions !== \"string\") {\n\t\t\tconsole.log(\"[agent.configs] Failed fetching genesis transactions file.\");\n\t\t\tbreak;\n\t\t}\n\n\t\tgenesisTransactionsCache.set(indyLedger, genesisTransactions);\n\t\tdelete indyLedger.ledgerUrl;\n\n\t\tledgers.push({\n\t\t\t...indyLedger,\n\t\t\tgenesisTransactions,\n\t\t});\n\t}\n\n\tconst agent = new Agent({\n\t\tconfig: {\n\t\t\t...config,\n\t\t\tindyLedgers: ledgers.map((ledger) => ({\n\t\t\t\t...ledger,\n\t\t\t})),\n\t\t},\n\t\tdependencies: agentDependencies,\n\t\t// Temporary fix for `Agent` types.\n\t\t// Reported issue\n\t\t//  https://github.com/hyperledger/aries-framework-javascript/issues/1187\n\t\tmodules: {\n\t\t\tconnections: new ConnectionsModule({\n\t\t\t\tautoAcceptConnections: true,\n\t\t\t}),\n\t\t},\n\t});\n\n\treturn agent;\n}\n","import { Agent } from \"@aries-framework/core\";\n\ntype TempAgent = Agent<{}>;\ninterface WithAgent {\n\tagent: TempAgent;\n}\n\nexport class ServiceWithAgent implements WithAgent {\n\tagent: TempAgent;\n\n\tconstructor(agent: TempAgent) {\n\t\tthis.agent = agent;\n\t}\n}\n","import {\n\tConnectionRecord,\n\tOutOfBandRecord,\n} from \"@aries-framework/core\";\nimport { ServiceWithAgent } from \"./baseService\";\n\nexport class AgentService extends ServiceWithAgent {\n\tasync config() {}\n\tasync issueCredential() {}\n\tasync requestCredentialProof() {}\n}\n","import { ConnectionRecord, CredentialState } from \"@aries-framework/core\";\nimport { ServiceWithAgent } from \"./baseService\";\n\nfunction convertToCredentialState(state: string): CredentialState {\n\tswitch (state) {\n\t\tcase \"proposal-sent\":\n\t\t\treturn CredentialState.ProposalSent;\n\t\tcase \"offer-received\":\n\t\t\treturn CredentialState.OfferReceived;\n\t\tcase \"request-sent\":\n\t\t\treturn CredentialState.RequestSent;\n\t\tcase \"credential-received\":\n\t\t\treturn CredentialState.CredentialReceived;\n\t}\n}\n\nexport class CredentialService extends ServiceWithAgent {\n\tasync allCredentials() {\n\t\tconst creds = await this.agent.credentials.getAll();\n\t\treturn creds;\n\t}\n\n\tasync credentialByConnection(connectionOrId: ConnectionRecord | string) {\n\t\tlet connectionRecord: ConnectionRecord;\n\t\tif (typeof connectionOrId === \"string\") {\n\t\t\tconnectionRecord = await this.agent.connections.findById(connectionOrId);\n\t\t} else {\n\t\t\tconnectionRecord = connectionOrId;\n\t\t}\n\n\t\tconst creds = await this.agent.credentials.getAll();\n\t\treturn creds;\n\t}\n}\n","import {\n\tConnectionRecord,\n\tDidExchangeState,\n\tHandshakeProtocol,\n\tOutOfBandRecord,\n} from \"@aries-framework/core\";\nimport { ServiceWithAgent } from \"./baseService\";\n\ntype Maybe<T> = T | null | undefined;\ninterface ConnectionQueryFilter {\n\tstate?: Maybe<DidExchangeState>;\n\tprotocol?: Maybe<HandshakeProtocol>;\n\tisReady?: Maybe<boolean>;\n\tisRequester?: Maybe<boolean>;\n\ttheirDid?: Maybe<string>;\n\ttheirLabel?: Maybe<string>;\n}\n\nexport class ConnectionService extends ServiceWithAgent {\n\t// Creates URL as invitation with encoded JWT payload containing connection metadata.\n\t// Invitation URL can be handled by aries agents.\n\tasync createInvitation(domainUrl: string): Promise<{\n\t\toutOfBandRecord: OutOfBandRecord;\n\t\tinvitationUrl: string;\n\t}> {\n\t\tconst outOfBandRecord =\n\t\t\tawait this.agent.oob.createInvitation();\n\n\t\tconst invitationUrl =\n\t\t\toutOfBandRecord.outOfBandInvitation.toUrl({\n\t\t\t\tdomain: domainUrl,\n\t\t\t});\n\n\t\treturn {\n\t\t\toutOfBandRecord,\n\t\t\tinvitationUrl,\n\t\t};\n\t}\n\n\t// Resolve invitation from URL, created by an aries agent.\n\t// The agent connection will be established by resolving the invitation.\n\t// If `autoAcceptConnections` is set to `true` on the agents config,\n\t// then the connection will be established by this function and the agent isn't requiring an explicit accept of the invitation.\n\tasync receiveInvitation(invitationUrl: string) {\n\t\tconst { connectionRecord } =\n\t\t\tawait this.agent.oob.receiveInvitationFromUrl(\n\t\t\t\tinvitationUrl\n\t\t\t);\n\n\t\treturn connectionRecord;\n\t}\n\n\t// Explicitly accept an invitation from an aries agent.\n\tasync accpetInvitation(invitationUrl: string) {\n\t\tconst { outOfBandRecord } =\n\t\t\tawait this.agent.oob.receiveInvitationFromUrl(\n\t\t\t\tinvitationUrl\n\t\t\t);\n\t\tconst { connectionRecord } =\n\t\t\tawait this.agent.oob.acceptInvitation(\n\t\t\t\toutOfBandRecord.id,\n\t\t\t\t{}\n\t\t\t);\n\n\t\treturn connectionRecord;\n\t}\n\n\t// Retrieve all established connections with the agent.\n\tasync allConnections(filter?: ConnectionQueryFilter) {\n\t\tconst connectionRecords =\n\t\t\tawait this.agent.connections.getAll();\n\n\t\tif (filter) {\n\t\t\treturn connectionRecords.filter((connectionRecord) => {\n\t\t\t\tfor (const key in filter) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tfilter[key] === undefined ||\n\t\t\t\t\t\tfilter[key] !== connectionRecord[key]\n\t\t\t\t\t)\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\n\t\treturn connectionRecords;\n\t}\n\n\t// Retrieve specific connection with the agent, queried by it's ID.\n\tasync connectionById(\n\t\tconnectionId: string,\n\t\tfilter?: ConnectionQueryFilter\n\t) {\n\t\tconst connectionRecord =\n\t\t\tawait this.agent.connections.findById(connectionId);\n\n\t\treturn connectionRecord;\n\t}\n\n\tasync removeConnection(\n\t\tconnectionOrId: ConnectionRecord | string\n\t) {\n\t\tlet connectionRecord: ConnectionRecord;\n\t\tif (typeof connectionOrId === \"string\") {\n\t\t\tconnectionRecord = await this.agent.connections.findById(\n\t\t\t\tconnectionOrId\n\t\t\t);\n\n\t\t\tif (connectionRecord === null) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`[connection.services] Connection record couldn't be found with id '${connectionOrId}'`\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tconnectionRecord = connectionOrId;\n\t\t}\n\n\t\t// Deleting connection record from agent storage\n\t\tawait this.agent.connections.deleteById(\n\t\t\tconnectionRecord.id\n\t\t);\n\n\t\treturn true;\n\t}\n}\n"],"mappings":"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","names":["fetch","import_core"]}